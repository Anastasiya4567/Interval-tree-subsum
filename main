#include <iostream>
#include <algorithm>

using namespace std;

struct tree
{
	long* t;
	tree(int n)
	{
		t = new long[4 * n + 1];
	}

	void build(int* a, int v, int l, int r)
	{
		if (l == r) t[v] = a[l];
		else
		{
			int mid = (l + r) / 2;
			build(a, v * 2, l, mid);
			build(a, v * 2 + 1, mid + 1, r);
			t[v] = t[v * 2] + t[v * 2 + 1];
		}
	}

	int sum(int v, int tl, int tr, int l, int r)
	{
		if (l > r)
			return 0;
		if (l == tl && r == tr)
			return t[v];
		int mid = (tl + tr) / 2;
		return sum(v * 2, tl, mid, l, min(r, mid))
			+ sum(v * 2 + 1, mid + 1, tr, max(l, mid + 1), r);
	}
};

int main()
{
	int n, * a;
	cin >> n;
	a = new int[n + 1];
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	tree t(n);
	t.build(a, 1, 1, n);
	cout << t.sum(1, 0, n - 1, 1, n - 2) << endl;
	return 0;
}
